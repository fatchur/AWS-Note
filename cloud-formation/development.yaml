# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT


AWSTemplateFormatVersion: '2010-09-09'

Description: Deploy MlOps Service Stack.

Parameters:
  EnvironmentName:
    Type: String
    Default: mlops-demo
    Description: "A friendly environment name that will be used for namespacing all cluster resources. Example: staging, qa, or production"
  PrivateDNSNamespaceName:
    Type: String
    Default: mlopsdemoservice
    Description: "The private DNS name that identifies the name that you want to use to locate your resources"
  MinContainersIndexSB1:
    Type: Number
    Default: 1
    Description: "Minimum number of ECS tasks per ECS service"
  MaxContainersIndexSB1:
    Type: Number
    Default: 3
    Description: "Maximum number of ECS tasks per ECS service"
  AutoScalingTargetValueIndexSB1:
    Type: Number
    Default: 50
    Description: "Target CPU utilizatio (%) for ECS services auto scaling"
  MinContainersModelSB1:
    Type: Number
    Default: 1
    Description: "Minimum number of ECS tasks per ECS service"
  MaxContainersModelSB1:
    Type: Number
    Default: 3
    Description: "Maximum number of ECS tasks per ECS service"
  AutoScalingTargetValueModelSB1:
    Type: Number
    Default: 50
    Description: "Target CPU utilizatio (%) for ECS services auto scaling"

Metadata: 
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - 
        Label: 
          default: "Generic"
        Parameters: 
          - EnvironmentName
          - PrivateDNSNamespaceName
      - 
        Label: 
          default: "IndexSB1 Service"
        Parameters: 
          - MinContainersIndexSB1
          - MaxContainersIndexSB1
          - AutoScalingTargetValueIndexSB1
      -
        Label: 
          default: "ModelSB1 Service"
        Parameters: 
          - MinContainersModelSB1
          - MaxContainersModelSB1
          - AutoScalingTargetValueModelSB1

Mappings:
  SubnetConfig:
    VPC:
      CIDR: '10.0.0.0/16'
    PublicOne:
      CIDR: '10.0.0.0/24'
    PrivateOne:
      CIDR: '10.0.100.0/24'


Resources:

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !FindInMap ['SubnetConfig', 'VPC', 'CIDR']

  PublicSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PublicOne', 'CIDR']
      MapPublicIpOnLaunch: true

  PrivateSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PrivateOne', 'CIDR']

  InternetGateway:
    Type: AWS::EC2::InternetGateway
  GatewayAttachement:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref 'VPC'
      InternetGatewayId: !Ref 'InternetGateway'
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachement
    Properties:
      RouteTableId: !Ref 'PublicRouteTable'
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'InternetGateway'
  PublicSubnetOneRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetOne
      RouteTableId: !Ref PublicRouteTable

  NatGatewayOneAttachment:
    Type: AWS::EC2::EIP
    DependsOn: GatewayAttachement
    Properties:
        Domain: vpc
  NatGatewayOne:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayOneAttachment.AllocationId
      SubnetId: !Ref PublicSubnetOne
  PrivateRouteTableOne:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
  PrivateRouteOne:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableOne
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayOne
  PrivateRouteTableOneAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableOne
      SubnetId: !Ref PrivateSubnetOne

  DynamoDBEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: "*"
            Principal: "*"
            Resource: "*"
      RouteTableIds:
        - !Ref 'PrivateRouteTableOne'
      ServiceName: !Sub com.amazonaws.${AWS::Region}.dynamodb
      VpcId: !Ref 'VPC'

  ECSCluster:
    Type: AWS::ECS::Cluster

  ContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the Fargate containers
      VpcId: !Ref 'VPC'

  ContainerSecurityGroupSelfIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref ContainerSecurityGroup
      SourceSecurityGroupId: !Ref ContainerSecurityGroup
      IpProtocol: tcp
      FromPort: 8080
      ToPort: 8080

  AutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole'

  ECSRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: ecs-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              - 'ec2:AttachNetworkInterface'
              - 'ec2:CreateNetworkInterface'
              - 'ec2:CreateNetworkInterfacePermission'
              - 'ec2:DeleteNetworkInterface'
              - 'ec2:DeleteNetworkInterfacePermission'
              - 'ec2:Describe*'
              - 'ec2:DetachNetworkInterface'

              - 'elasticloadbalancing:DeregisterInstancesFromLoadBalancer'
              - 'elasticloadbalancing:DeregisterTargets'
              - 'elasticloadbalancing:Describe*'
              - 'elasticloadbalancing:RegisterInstancesWithLoadBalancer'
              - 'elasticloadbalancing:RegisterTargets'
            Resource: '*'

  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs-tasks.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: AmazonECSTaskExecutionRolePolicy
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                # Allow the ECS Tasks to download images from ECR
                - 'ecr:GetAuthorizationToken'
                - 'ecr:BatchCheckLayerAvailability'
                - 'ecr:GetDownloadUrlForLayer'
                - 'ecr:BatchGetImage'

                # Allow the ECS tasks to upload logs to CloudWatch
                - 'logs:CreateLogStream'
                - 'logs:PutLogEvents'

                # additional for accomodating apibox
                # access dynamodb 
                - 'dynamodb:GetItem'
                - 'dynamodb:Query'
                - 'dynamodb:Scan'
                - 'dynamodb:BatchGetItem'
                - 'dynamodb:List*'

                # access parameter store 
                - 'ssm:*'
              Resource: '*'

  PrivateDNSNamespace:
    Type: 'AWS::ServiceDiscovery::PrivateDnsNamespace'
    Properties:
      Vpc: !Ref VPC
      Name: !Ref PrivateDNSNamespaceName

  ServiceDiscoveryServiceIndexSB1:
    Type: 'AWS::ServiceDiscovery::Service'
    Properties:
      DnsConfig:
        DnsRecords:
          - Type: SRV
            TTL: 60
        NamespaceId: !Ref PrivateDNSNamespace
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: 'sb1.index'

  ServiceDiscoveryServiceModelSB1:
    Type: 'AWS::ServiceDiscovery::Service'
    Properties:
      DnsConfig:
        DnsRecords:
          - Type: SRV
            TTL: 60
        NamespaceId: !Ref PrivateDNSNamespace
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: 'sb1.model'

  TaskDefinitionIndexSB1:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      TaskRoleArn: arn:aws:iam::808669242981:role/ecsTaskExecutionRole
      ExecutionRoleArn: arn:aws:iam::808669242981:role/ecsTaskExecutionRole
      RequiresCompatibilities:
        - FARGATE
      ContainerDefinitions:
          - Name: 'indexsb1'
            Image: '808669242981.dkr.ecr.us-east-1.amazonaws.com/mlops-rec-sb1-index-images:8160a78'
            Essential: true
            PortMappings:
              - ContainerPort: 8080
                Protocol: tcp
      NetworkMode: awsvpc
      Memory: '8GB'
      Cpu: '1024'

  TaskDefinitionModelSB1:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      TaskRoleArn: arn:aws:iam::808669242981:role/ecsTaskExecutionRole
      ExecutionRoleArn: arn:aws:iam::808669242981:role/ecsTaskExecutionRole
      RequiresCompatibilities:
        - FARGATE
      ContainerDefinitions:
          - Name: 'modelsb1'
            Image: '808669242981.dkr.ecr.us-east-1.amazonaws.com/mlops-rec-sb1-model-images:8760327'
            Essential: true
            PortMappings:
              - ContainerPort: 8080
                Protocol: tcp
      NetworkMode: awsvpc
      Memory: '2GB'
      Cpu: '256'

  ServiceIndexSB1: 
    Type: AWS::ECS::Service
    DependsOn:
      - PrivateRouteOne
    Properties: 
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref TaskDefinitionIndexSB1
      LaunchType: FARGATE
      DesiredCount: 1
      ServiceRegistries:
        - RegistryArn: !GetAtt ServiceDiscoveryServiceIndexSB1.Arn
          Port: 8080
      NetworkConfiguration:
          AwsvpcConfiguration:
            AssignPublicIp: DISABLED
            Subnets:
              - !Ref PrivateSubnetOne
            SecurityGroups:
              - !Ref ContainerSecurityGroup
      
  ServiceModelSB1: 
    Type: AWS::ECS::Service
    DependsOn:
      - PrivateRouteOne
    Properties: 
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref TaskDefinitionModelSB1
      LaunchType: FARGATE
      DesiredCount: 1
      ServiceRegistries:
        - RegistryArn: !GetAtt ServiceDiscoveryServiceModelSB1.Arn
          Port: 8080
      NetworkConfiguration:
          AwsvpcConfiguration:
            AssignPublicIp: DISABLED
            Subnets:
              - !Ref PrivateSubnetOne
            SecurityGroups:
              - !Ref ContainerSecurityGroup

  AutoScalingTargetIndexSB1:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MinCapacity: !Ref MinContainersIndexSB1
      MaxCapacity: !Ref MaxContainersIndexSB1
      ResourceId: !Join ['/', [service, !Ref ECSCluster, !GetAtt ServiceIndexSB1.Name]]
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      RoleARN: !GetAtt AutoScalingRole.Arn
  
  AutoScalingTargetModelSB1:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MinCapacity: !Ref MinContainersModelSB1
      MaxCapacity: !Ref MaxContainersModelSB1
      ResourceId: !Join ['/', [service, !Ref ECSCluster, !GetAtt ServiceModelSB1.Name]]
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      RoleARN: !GetAtt AutoScalingRole.Arn

  AutoScalingPolicyIndexSB1:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Join ['', [!GetAtt ServiceIndexSB1.Name, '-AutoScalingPolicy']]
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref AutoScalingTargetIndexSB1
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        TargetValue: !Ref AutoScalingTargetValueIndexSB1

  AutoScalingPolicyModelSB1:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Join ['', [!GetAtt ServiceModelSB1.Name, '-AutoScalingPolicy']]
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref AutoScalingTargetModelSB1
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        TargetValue: !Ref AutoScalingTargetValueModelSB1

  HttpApiVPCLink:
    Type: AWS::ApiGatewayV2::VpcLink
    Properties: 
      Name: !Ref EnvironmentName
      SecurityGroupIds: 
        - !Ref ContainerSecurityGroup
      SubnetIds:
        - !Ref PrivateSubnetOne

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email

  UserPoolClient:
    Type: "AWS::Cognito::UserPoolClient"
    Properties:
      UserPoolId: !Ref UserPool
      GenerateSecret: false
      SupportedIdentityProviders:
        - COGNITO
      PreventUserExistenceErrors: ENABLED

  HttpApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Body:
        openapi: "3.0.1"
        info:
          title: !Ref EnvironmentName
        components:
          securitySchemes:
            my-authorizer:
              type: oauth2
              flows: {}
              x-amazon-apigateway-authorizer:
                identitySource: "$request.header.Authorization"
                jwtConfiguration:
                  audience:
                  - !Ref 'UserPoolClient'
                  issuer: !GetAtt 'UserPool.ProviderURL'
                type: jwt
        paths:
          /index/sb1/predict:
            post:
              responses:
                default:
                  description: "Default response for GET /predict"
              x-amazon-apigateway-integration:
                payloadFormatVersion: "1.0"
                connectionId: !Ref HttpApiVPCLink
                type: "http_proxy"
                httpMethod: "ANY"
                uri: !GetAtt ServiceDiscoveryServiceIndexSB1.Arn
                connectionType: "VPC_LINK"
          /index/sb1/health:
            get:
              responses:
                default:
                  description: "Default response for GET /predict"
              x-amazon-apigateway-integration:
                payloadFormatVersion: "1.0"
                connectionId: !Ref HttpApiVPCLink
                type: "http_proxy"
                httpMethod: "ANY"
                uri: !GetAtt ServiceDiscoveryServiceIndexSB1.Arn
                connectionType: "VPC_LINK"
          /index/sb1/article-suggestion:
            get:
              responses:
                default:
                  description: "GET Random Article Url Suggestion"
              x-amazon-apigateway-integration:
                payloadFormatVersion: "1.0"
                connectionId: !Ref HttpApiVPCLink
                type: "http_proxy"
                httpMethod: "ANY"
                uri: !GetAtt ServiceDiscoveryServiceIndexSB1.Arn
                connectionType: "VPC_LINK"
          /model/sb1/predict:
            post:
              responses:
                default:
                  description: "Default response for GET /predict"
              x-amazon-apigateway-integration:
                payloadFormatVersion: "1.0"
                connectionId: !Ref HttpApiVPCLink
                type: "http_proxy"
                httpMethod: "ANY"
                uri: !GetAtt ServiceDiscoveryServiceModelSB1.Arn
                connectionType: "VPC_LINK"
          /model/sb1/health:
            get:
              responses:
                default:
                  description: "Default response for GET /predict"
              x-amazon-apigateway-integration:
                payloadFormatVersion: "1.0"
                connectionId: !Ref HttpApiVPCLink
                type: "http_proxy"
                httpMethod: "ANY"
                uri: !GetAtt ServiceDiscoveryServiceModelSB1.Arn
                connectionType: "VPC_LINK"

        x-amazon-apigateway-cors:
          # This is a Test client web app that invokes the API, used in the blog post, for demostration purposes only.
          # In production, make sure that you do NOT allow any untrusted origin.
          allowOrigins:
            - '*'
            #- 'https://master.d34am23lsz3nvz.amplifyapp.com'
          allowHeaders:
            - '*'
          #additional method for accomodating apibox 
          allowMethods:
            - 'POST'
            - 'GET'
            - 'OPTIONS'
        x-amazon-apigateway-importexport-version: "1.0"

  HttpApiStage:
    Type: 'AWS::ApiGatewayV2::Stage'
    Properties:
      StageName: '$default'
      ApiId: !Ref 'HttpApi'
      AutoDeploy: true